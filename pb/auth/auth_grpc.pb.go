// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_HealthCheck_FullMethodName                 = "/auth.Auth/HealthCheck"
	Auth_GroupHostPermission_FullMethodName         = "/auth.Auth/GroupHostPermission"
	Auth_GroupParticipantPermission_FullMethodName  = "/auth.Auth/GroupParticipantPermission"
	Auth_PublicHostPermission_FullMethodName        = "/auth.Auth/PublicHostPermission"
	Auth_PublicParticipantPermission_FullMethodName = "/auth.Auth/PublicParticipantPermission"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GroupHostPermission(ctx context.Context, in *GroupHostPermissionRequest, opts ...grpc.CallOption) (*GroupHostPermissionResponse, error)
	GroupParticipantPermission(ctx context.Context, in *GroupParticipantPermissionRequest, opts ...grpc.CallOption) (*GroupParticipantPermissionResponse, error)
	PublicHostPermission(ctx context.Context, in *PublicHostPermissionRequest, opts ...grpc.CallOption) (*PublicHostPermissionResponse, error)
	PublicParticipantPermission(ctx context.Context, in *PublicParticipantPermissionRequest, opts ...grpc.CallOption) (*PublicParticipantPermissionResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Auth_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GroupHostPermission(ctx context.Context, in *GroupHostPermissionRequest, opts ...grpc.CallOption) (*GroupHostPermissionResponse, error) {
	out := new(GroupHostPermissionResponse)
	err := c.cc.Invoke(ctx, Auth_GroupHostPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GroupParticipantPermission(ctx context.Context, in *GroupParticipantPermissionRequest, opts ...grpc.CallOption) (*GroupParticipantPermissionResponse, error) {
	out := new(GroupParticipantPermissionResponse)
	err := c.cc.Invoke(ctx, Auth_GroupParticipantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PublicHostPermission(ctx context.Context, in *PublicHostPermissionRequest, opts ...grpc.CallOption) (*PublicHostPermissionResponse, error) {
	out := new(PublicHostPermissionResponse)
	err := c.cc.Invoke(ctx, Auth_PublicHostPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PublicParticipantPermission(ctx context.Context, in *PublicParticipantPermissionRequest, opts ...grpc.CallOption) (*PublicParticipantPermissionResponse, error) {
	out := new(PublicParticipantPermissionResponse)
	err := c.cc.Invoke(ctx, Auth_PublicParticipantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	HealthCheck(context.Context, *Request) (*Response, error)
	GroupHostPermission(context.Context, *GroupHostPermissionRequest) (*GroupHostPermissionResponse, error)
	GroupParticipantPermission(context.Context, *GroupParticipantPermissionRequest) (*GroupParticipantPermissionResponse, error)
	PublicHostPermission(context.Context, *PublicHostPermissionRequest) (*PublicHostPermissionResponse, error)
	PublicParticipantPermission(context.Context, *PublicParticipantPermissionRequest) (*PublicParticipantPermissionResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) HealthCheck(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAuthServer) GroupHostPermission(context.Context, *GroupHostPermissionRequest) (*GroupHostPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupHostPermission not implemented")
}
func (UnimplementedAuthServer) GroupParticipantPermission(context.Context, *GroupParticipantPermissionRequest) (*GroupParticipantPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupParticipantPermission not implemented")
}
func (UnimplementedAuthServer) PublicHostPermission(context.Context, *PublicHostPermissionRequest) (*PublicHostPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicHostPermission not implemented")
}
func (UnimplementedAuthServer) PublicParticipantPermission(context.Context, *PublicParticipantPermissionRequest) (*PublicParticipantPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicParticipantPermission not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).HealthCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GroupHostPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupHostPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GroupHostPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GroupHostPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GroupHostPermission(ctx, req.(*GroupHostPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GroupParticipantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupParticipantPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GroupParticipantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GroupParticipantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GroupParticipantPermission(ctx, req.(*GroupParticipantPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PublicHostPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicHostPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PublicHostPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PublicHostPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PublicHostPermission(ctx, req.(*PublicHostPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PublicParticipantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicParticipantPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PublicParticipantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PublicParticipantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PublicParticipantPermission(ctx, req.(*PublicParticipantPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Auth_HealthCheck_Handler,
		},
		{
			MethodName: "GroupHostPermission",
			Handler:    _Auth_GroupHostPermission_Handler,
		},
		{
			MethodName: "GroupParticipantPermission",
			Handler:    _Auth_GroupParticipantPermission_Handler,
		},
		{
			MethodName: "PublicHostPermission",
			Handler:    _Auth_PublicHostPermission_Handler,
		},
		{
			MethodName: "PublicParticipantPermission",
			Handler:    _Auth_PublicParticipantPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
