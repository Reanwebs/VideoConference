// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: conference/conference.proto

package conference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conference_HealthCheck_FullMethodName               = "/conference.Conference/HealthCheck"
	Conference_SchedulePrivateConference_FullMethodName = "/conference.Conference/SchedulePrivateConference"
	Conference_ScheduledConference_FullMethodName       = "/conference.Conference/ScheduledConference"
	Conference_StartPrivateConference_FullMethodName    = "/conference.Conference/StartPrivateConference"
	Conference_JoinPrivateConference_FullMethodName     = "/conference.Conference/JoinPrivateConference"
	Conference_LeavePrivateConference_FullMethodName    = "/conference.Conference/LeavePrivateConference"
	Conference_EndPrivateConference_FullMethodName      = "/conference.Conference/EndPrivateConference"
	Conference_StartStream_FullMethodName               = "/conference.Conference/StartStream"
	Conference_GetStream_FullMethodName                 = "/conference.Conference/GetStream"
	Conference_StopStream_FullMethodName                = "/conference.Conference/StopStream"
	Conference_JoinStream_FullMethodName                = "/conference.Conference/JoinStream"
	Conference_LeaveStream_FullMethodName               = "/conference.Conference/LeaveStream"
	Conference_ScheduleGroupConference_FullMethodName   = "/conference.Conference/ScheduleGroupConference"
	Conference_SchedulePublicConference_FullMethodName  = "/conference.Conference/SchedulePublicConference"
	Conference_CompletedSchedules_FullMethodName        = "/conference.Conference/CompletedSchedules"
	Conference_StartGroupConference_FullMethodName      = "/conference.Conference/StartGroupConference"
	Conference_StartPublicConference_FullMethodName     = "/conference.Conference/StartPublicConference"
	Conference_JoinGroupConfernce_FullMethodName        = "/conference.Conference/JoinGroupConfernce"
	Conference_JoinPublicConference_FullMethodName      = "/conference.Conference/JoinPublicConference"
	Conference_LeaveGroupConference_FullMethodName      = "/conference.Conference/LeaveGroupConference"
	Conference_LeavePublicConference_FullMethodName     = "/conference.Conference/LeavePublicConference"
	Conference_RemovePrivateParticipant_FullMethodName  = "/conference.Conference/RemovePrivateParticipant"
	Conference_RemoveGroupParticipant_FullMethodName    = "/conference.Conference/RemoveGroupParticipant"
	Conference_RemovePublicParticipant_FullMethodName   = "/conference.Conference/RemovePublicParticipant"
	Conference_EndGroupConference_FullMethodName        = "/conference.Conference/EndGroupConference"
	Conference_EndPublicConference_FullMethodName       = "/conference.Conference/EndPublicConference"
)

// ConferenceClient is the client API for Conference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceClient interface {
	HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SchedulePrivateConference(ctx context.Context, in *SchedulePrivateConferenceRequest, opts ...grpc.CallOption) (*SchedulePrivateConferenceResponse, error)
	ScheduledConference(ctx context.Context, in *ScheduledConferenceRequest, opts ...grpc.CallOption) (*ScheduledConferenceResponse, error)
	StartPrivateConference(ctx context.Context, in *StartPrivateConferenceRequest, opts ...grpc.CallOption) (*StartPrivateConferenceResponse, error)
	JoinPrivateConference(ctx context.Context, in *JoinPrivateConferenceRequest, opts ...grpc.CallOption) (*JoinPrivateConferenceResponse, error)
	LeavePrivateConference(ctx context.Context, in *LeavePrivateConferenceRequest, opts ...grpc.CallOption) (*LeavePrivateConferenceResponse, error)
	EndPrivateConference(ctx context.Context, in *EndPrivateConferenceRequest, opts ...grpc.CallOption) (*EndPrivateConferenceResponse, error)
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error)
	JoinStream(ctx context.Context, in *JoinStreamRequest, opts ...grpc.CallOption) (*JoinStreamResponse, error)
	LeaveStream(ctx context.Context, in *LeaveStreamRequest, opts ...grpc.CallOption) (*LeaveStreamResponse, error)
	ScheduleGroupConference(ctx context.Context, in *ScheduleGroupConferenceRequest, opts ...grpc.CallOption) (*ScheduleGroupConferenceResponse, error)
	SchedulePublicConference(ctx context.Context, in *SchedulePublicConferenceRequest, opts ...grpc.CallOption) (*SchedulePublicConferenceResponse, error)
	CompletedSchedules(ctx context.Context, in *CompletedSchedulesRequest, opts ...grpc.CallOption) (*CompletedSchedulesResponse, error)
	StartGroupConference(ctx context.Context, in *StartGroupConferenceRequest, opts ...grpc.CallOption) (*StartGroupConferenceResponse, error)
	StartPublicConference(ctx context.Context, in *StartPublicConferenceRequest, opts ...grpc.CallOption) (*StartPublicConferenceResponse, error)
	JoinGroupConfernce(ctx context.Context, in *JoinGroupConferenceRequest, opts ...grpc.CallOption) (*JoinGroupConferenceResponse, error)
	JoinPublicConference(ctx context.Context, in *JoinPublicConferenceRequest, opts ...grpc.CallOption) (*JoinPublicConferenceResponse, error)
	LeaveGroupConference(ctx context.Context, in *LeaveGroupConferenceRequest, opts ...grpc.CallOption) (*LeaveGroupConferenceResponse, error)
	LeavePublicConference(ctx context.Context, in *LeavePublicConferenceRequest, opts ...grpc.CallOption) (*LeavePublicConferenceResponse, error)
	RemovePrivateParticipant(ctx context.Context, in *RemovePrivateParticipantRequest, opts ...grpc.CallOption) (*RemovePrivateParticipantResponse, error)
	RemoveGroupParticipant(ctx context.Context, in *RemoveGroupParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupParticipantResponse, error)
	RemovePublicParticipant(ctx context.Context, in *RemovePublicParticipantRequest, opts ...grpc.CallOption) (*RemovePublicParticipantResponse, error)
	EndGroupConference(ctx context.Context, in *EndGroupConferenceRequest, opts ...grpc.CallOption) (*EndGroupConferenceResponse, error)
	EndPublicConference(ctx context.Context, in *EndPublicConferenceRequest, opts ...grpc.CallOption) (*EndPublicConferenceResponse, error)
}

type conferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceClient(cc grpc.ClientConnInterface) ConferenceClient {
	return &conferenceClient{cc}
}

func (c *conferenceClient) HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Conference_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) SchedulePrivateConference(ctx context.Context, in *SchedulePrivateConferenceRequest, opts ...grpc.CallOption) (*SchedulePrivateConferenceResponse, error) {
	out := new(SchedulePrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_SchedulePrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ScheduledConference(ctx context.Context, in *ScheduledConferenceRequest, opts ...grpc.CallOption) (*ScheduledConferenceResponse, error) {
	out := new(ScheduledConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_ScheduledConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartPrivateConference(ctx context.Context, in *StartPrivateConferenceRequest, opts ...grpc.CallOption) (*StartPrivateConferenceResponse, error) {
	out := new(StartPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinPrivateConference(ctx context.Context, in *JoinPrivateConferenceRequest, opts ...grpc.CallOption) (*JoinPrivateConferenceResponse, error) {
	out := new(JoinPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeavePrivateConference(ctx context.Context, in *LeavePrivateConferenceRequest, opts ...grpc.CallOption) (*LeavePrivateConferenceResponse, error) {
	out := new(LeavePrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeavePrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndPrivateConference(ctx context.Context, in *EndPrivateConferenceRequest, opts ...grpc.CallOption) (*EndPrivateConferenceResponse, error) {
	out := new(EndPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error) {
	out := new(StartStreamResponse)
	err := c.cc.Invoke(ctx, Conference_StartStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, Conference_GetStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error) {
	out := new(StopStreamResponse)
	err := c.cc.Invoke(ctx, Conference_StopStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinStream(ctx context.Context, in *JoinStreamRequest, opts ...grpc.CallOption) (*JoinStreamResponse, error) {
	out := new(JoinStreamResponse)
	err := c.cc.Invoke(ctx, Conference_JoinStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeaveStream(ctx context.Context, in *LeaveStreamRequest, opts ...grpc.CallOption) (*LeaveStreamResponse, error) {
	out := new(LeaveStreamResponse)
	err := c.cc.Invoke(ctx, Conference_LeaveStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ScheduleGroupConference(ctx context.Context, in *ScheduleGroupConferenceRequest, opts ...grpc.CallOption) (*ScheduleGroupConferenceResponse, error) {
	out := new(ScheduleGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_ScheduleGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) SchedulePublicConference(ctx context.Context, in *SchedulePublicConferenceRequest, opts ...grpc.CallOption) (*SchedulePublicConferenceResponse, error) {
	out := new(SchedulePublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_SchedulePublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) CompletedSchedules(ctx context.Context, in *CompletedSchedulesRequest, opts ...grpc.CallOption) (*CompletedSchedulesResponse, error) {
	out := new(CompletedSchedulesResponse)
	err := c.cc.Invoke(ctx, Conference_CompletedSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartGroupConference(ctx context.Context, in *StartGroupConferenceRequest, opts ...grpc.CallOption) (*StartGroupConferenceResponse, error) {
	out := new(StartGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartPublicConference(ctx context.Context, in *StartPublicConferenceRequest, opts ...grpc.CallOption) (*StartPublicConferenceResponse, error) {
	out := new(StartPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinGroupConfernce(ctx context.Context, in *JoinGroupConferenceRequest, opts ...grpc.CallOption) (*JoinGroupConferenceResponse, error) {
	out := new(JoinGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinGroupConfernce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinPublicConference(ctx context.Context, in *JoinPublicConferenceRequest, opts ...grpc.CallOption) (*JoinPublicConferenceResponse, error) {
	out := new(JoinPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeaveGroupConference(ctx context.Context, in *LeaveGroupConferenceRequest, opts ...grpc.CallOption) (*LeaveGroupConferenceResponse, error) {
	out := new(LeaveGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeaveGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeavePublicConference(ctx context.Context, in *LeavePublicConferenceRequest, opts ...grpc.CallOption) (*LeavePublicConferenceResponse, error) {
	out := new(LeavePublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeavePublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemovePrivateParticipant(ctx context.Context, in *RemovePrivateParticipantRequest, opts ...grpc.CallOption) (*RemovePrivateParticipantResponse, error) {
	out := new(RemovePrivateParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemovePrivateParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemoveGroupParticipant(ctx context.Context, in *RemoveGroupParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupParticipantResponse, error) {
	out := new(RemoveGroupParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemoveGroupParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemovePublicParticipant(ctx context.Context, in *RemovePublicParticipantRequest, opts ...grpc.CallOption) (*RemovePublicParticipantResponse, error) {
	out := new(RemovePublicParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemovePublicParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndGroupConference(ctx context.Context, in *EndGroupConferenceRequest, opts ...grpc.CallOption) (*EndGroupConferenceResponse, error) {
	out := new(EndGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndPublicConference(ctx context.Context, in *EndPublicConferenceRequest, opts ...grpc.CallOption) (*EndPublicConferenceResponse, error) {
	out := new(EndPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServer is the server API for Conference service.
// All implementations must embed UnimplementedConferenceServer
// for forward compatibility
type ConferenceServer interface {
	HealthCheck(context.Context, *Request) (*Response, error)
	SchedulePrivateConference(context.Context, *SchedulePrivateConferenceRequest) (*SchedulePrivateConferenceResponse, error)
	ScheduledConference(context.Context, *ScheduledConferenceRequest) (*ScheduledConferenceResponse, error)
	StartPrivateConference(context.Context, *StartPrivateConferenceRequest) (*StartPrivateConferenceResponse, error)
	JoinPrivateConference(context.Context, *JoinPrivateConferenceRequest) (*JoinPrivateConferenceResponse, error)
	LeavePrivateConference(context.Context, *LeavePrivateConferenceRequest) (*LeavePrivateConferenceResponse, error)
	EndPrivateConference(context.Context, *EndPrivateConferenceRequest) (*EndPrivateConferenceResponse, error)
	StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error)
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error)
	JoinStream(context.Context, *JoinStreamRequest) (*JoinStreamResponse, error)
	LeaveStream(context.Context, *LeaveStreamRequest) (*LeaveStreamResponse, error)
	ScheduleGroupConference(context.Context, *ScheduleGroupConferenceRequest) (*ScheduleGroupConferenceResponse, error)
	SchedulePublicConference(context.Context, *SchedulePublicConferenceRequest) (*SchedulePublicConferenceResponse, error)
	CompletedSchedules(context.Context, *CompletedSchedulesRequest) (*CompletedSchedulesResponse, error)
	StartGroupConference(context.Context, *StartGroupConferenceRequest) (*StartGroupConferenceResponse, error)
	StartPublicConference(context.Context, *StartPublicConferenceRequest) (*StartPublicConferenceResponse, error)
	JoinGroupConfernce(context.Context, *JoinGroupConferenceRequest) (*JoinGroupConferenceResponse, error)
	JoinPublicConference(context.Context, *JoinPublicConferenceRequest) (*JoinPublicConferenceResponse, error)
	LeaveGroupConference(context.Context, *LeaveGroupConferenceRequest) (*LeaveGroupConferenceResponse, error)
	LeavePublicConference(context.Context, *LeavePublicConferenceRequest) (*LeavePublicConferenceResponse, error)
	RemovePrivateParticipant(context.Context, *RemovePrivateParticipantRequest) (*RemovePrivateParticipantResponse, error)
	RemoveGroupParticipant(context.Context, *RemoveGroupParticipantRequest) (*RemoveGroupParticipantResponse, error)
	RemovePublicParticipant(context.Context, *RemovePublicParticipantRequest) (*RemovePublicParticipantResponse, error)
	EndGroupConference(context.Context, *EndGroupConferenceRequest) (*EndGroupConferenceResponse, error)
	EndPublicConference(context.Context, *EndPublicConferenceRequest) (*EndPublicConferenceResponse, error)
	mustEmbedUnimplementedConferenceServer()
}

// UnimplementedConferenceServer must be embedded to have forward compatible implementations.
type UnimplementedConferenceServer struct {
}

func (UnimplementedConferenceServer) HealthCheck(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedConferenceServer) SchedulePrivateConference(context.Context, *SchedulePrivateConferenceRequest) (*SchedulePrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePrivateConference not implemented")
}
func (UnimplementedConferenceServer) ScheduledConference(context.Context, *ScheduledConferenceRequest) (*ScheduledConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduledConference not implemented")
}
func (UnimplementedConferenceServer) StartPrivateConference(context.Context, *StartPrivateConferenceRequest) (*StartPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPrivateConference not implemented")
}
func (UnimplementedConferenceServer) JoinPrivateConference(context.Context, *JoinPrivateConferenceRequest) (*JoinPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPrivateConference not implemented")
}
func (UnimplementedConferenceServer) LeavePrivateConference(context.Context, *LeavePrivateConferenceRequest) (*LeavePrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePrivateConference not implemented")
}
func (UnimplementedConferenceServer) EndPrivateConference(context.Context, *EndPrivateConferenceRequest) (*EndPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPrivateConference not implemented")
}
func (UnimplementedConferenceServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedConferenceServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedConferenceServer) StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedConferenceServer) JoinStream(context.Context, *JoinStreamRequest) (*JoinStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinStream not implemented")
}
func (UnimplementedConferenceServer) LeaveStream(context.Context, *LeaveStreamRequest) (*LeaveStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveStream not implemented")
}
func (UnimplementedConferenceServer) ScheduleGroupConference(context.Context, *ScheduleGroupConferenceRequest) (*ScheduleGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleGroupConference not implemented")
}
func (UnimplementedConferenceServer) SchedulePublicConference(context.Context, *SchedulePublicConferenceRequest) (*SchedulePublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePublicConference not implemented")
}
func (UnimplementedConferenceServer) CompletedSchedules(context.Context, *CompletedSchedulesRequest) (*CompletedSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedSchedules not implemented")
}
func (UnimplementedConferenceServer) StartGroupConference(context.Context, *StartGroupConferenceRequest) (*StartGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGroupConference not implemented")
}
func (UnimplementedConferenceServer) StartPublicConference(context.Context, *StartPublicConferenceRequest) (*StartPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPublicConference not implemented")
}
func (UnimplementedConferenceServer) JoinGroupConfernce(context.Context, *JoinGroupConferenceRequest) (*JoinGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupConfernce not implemented")
}
func (UnimplementedConferenceServer) JoinPublicConference(context.Context, *JoinPublicConferenceRequest) (*JoinPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublicConference not implemented")
}
func (UnimplementedConferenceServer) LeaveGroupConference(context.Context, *LeaveGroupConferenceRequest) (*LeaveGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroupConference not implemented")
}
func (UnimplementedConferenceServer) LeavePublicConference(context.Context, *LeavePublicConferenceRequest) (*LeavePublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePublicConference not implemented")
}
func (UnimplementedConferenceServer) RemovePrivateParticipant(context.Context, *RemovePrivateParticipantRequest) (*RemovePrivateParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrivateParticipant not implemented")
}
func (UnimplementedConferenceServer) RemoveGroupParticipant(context.Context, *RemoveGroupParticipantRequest) (*RemoveGroupParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupParticipant not implemented")
}
func (UnimplementedConferenceServer) RemovePublicParticipant(context.Context, *RemovePublicParticipantRequest) (*RemovePublicParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicParticipant not implemented")
}
func (UnimplementedConferenceServer) EndGroupConference(context.Context, *EndGroupConferenceRequest) (*EndGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGroupConference not implemented")
}
func (UnimplementedConferenceServer) EndPublicConference(context.Context, *EndPublicConferenceRequest) (*EndPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPublicConference not implemented")
}
func (UnimplementedConferenceServer) mustEmbedUnimplementedConferenceServer() {}

// UnsafeConferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceServer will
// result in compilation errors.
type UnsafeConferenceServer interface {
	mustEmbedUnimplementedConferenceServer()
}

func RegisterConferenceServer(s grpc.ServiceRegistrar, srv ConferenceServer) {
	s.RegisterService(&Conference_ServiceDesc, srv)
}

func _Conference_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).HealthCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_SchedulePrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).SchedulePrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_SchedulePrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).SchedulePrivateConference(ctx, req.(*SchedulePrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ScheduledConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ScheduledConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ScheduledConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ScheduledConference(ctx, req.(*ScheduledConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartPrivateConference(ctx, req.(*StartPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinPrivateConference(ctx, req.(*JoinPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeavePrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeavePrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeavePrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeavePrivateConference(ctx, req.(*LeavePrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndPrivateConference(ctx, req.(*EndPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StopStream(ctx, req.(*StopStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinStream(ctx, req.(*JoinStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeaveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeaveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeaveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeaveStream(ctx, req.(*LeaveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ScheduleGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ScheduleGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ScheduleGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ScheduleGroupConference(ctx, req.(*ScheduleGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_SchedulePublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).SchedulePublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_SchedulePublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).SchedulePublicConference(ctx, req.(*SchedulePublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_CompletedSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletedSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).CompletedSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_CompletedSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).CompletedSchedules(ctx, req.(*CompletedSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartGroupConference(ctx, req.(*StartGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartPublicConference(ctx, req.(*StartPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinGroupConfernce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinGroupConfernce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinGroupConfernce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinGroupConfernce(ctx, req.(*JoinGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinPublicConference(ctx, req.(*JoinPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeaveGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeaveGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeaveGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeaveGroupConference(ctx, req.(*LeaveGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeavePublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeavePublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeavePublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeavePublicConference(ctx, req.(*LeavePublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemovePrivateParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePrivateParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemovePrivateParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemovePrivateParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemovePrivateParticipant(ctx, req.(*RemovePrivateParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemoveGroupParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemoveGroupParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemoveGroupParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemoveGroupParticipant(ctx, req.(*RemoveGroupParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemovePublicParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePublicParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemovePublicParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemovePublicParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemovePublicParticipant(ctx, req.(*RemovePublicParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndGroupConference(ctx, req.(*EndGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndPublicConference(ctx, req.(*EndPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Conference_ServiceDesc is the grpc.ServiceDesc for Conference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conference.Conference",
	HandlerType: (*ConferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Conference_HealthCheck_Handler,
		},
		{
			MethodName: "SchedulePrivateConference",
			Handler:    _Conference_SchedulePrivateConference_Handler,
		},
		{
			MethodName: "ScheduledConference",
			Handler:    _Conference_ScheduledConference_Handler,
		},
		{
			MethodName: "StartPrivateConference",
			Handler:    _Conference_StartPrivateConference_Handler,
		},
		{
			MethodName: "JoinPrivateConference",
			Handler:    _Conference_JoinPrivateConference_Handler,
		},
		{
			MethodName: "LeavePrivateConference",
			Handler:    _Conference_LeavePrivateConference_Handler,
		},
		{
			MethodName: "EndPrivateConference",
			Handler:    _Conference_EndPrivateConference_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _Conference_StartStream_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _Conference_GetStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _Conference_StopStream_Handler,
		},
		{
			MethodName: "JoinStream",
			Handler:    _Conference_JoinStream_Handler,
		},
		{
			MethodName: "LeaveStream",
			Handler:    _Conference_LeaveStream_Handler,
		},
		{
			MethodName: "ScheduleGroupConference",
			Handler:    _Conference_ScheduleGroupConference_Handler,
		},
		{
			MethodName: "SchedulePublicConference",
			Handler:    _Conference_SchedulePublicConference_Handler,
		},
		{
			MethodName: "CompletedSchedules",
			Handler:    _Conference_CompletedSchedules_Handler,
		},
		{
			MethodName: "StartGroupConference",
			Handler:    _Conference_StartGroupConference_Handler,
		},
		{
			MethodName: "StartPublicConference",
			Handler:    _Conference_StartPublicConference_Handler,
		},
		{
			MethodName: "JoinGroupConfernce",
			Handler:    _Conference_JoinGroupConfernce_Handler,
		},
		{
			MethodName: "JoinPublicConference",
			Handler:    _Conference_JoinPublicConference_Handler,
		},
		{
			MethodName: "LeaveGroupConference",
			Handler:    _Conference_LeaveGroupConference_Handler,
		},
		{
			MethodName: "LeavePublicConference",
			Handler:    _Conference_LeavePublicConference_Handler,
		},
		{
			MethodName: "RemovePrivateParticipant",
			Handler:    _Conference_RemovePrivateParticipant_Handler,
		},
		{
			MethodName: "RemoveGroupParticipant",
			Handler:    _Conference_RemoveGroupParticipant_Handler,
		},
		{
			MethodName: "RemovePublicParticipant",
			Handler:    _Conference_RemovePublicParticipant_Handler,
		},
		{
			MethodName: "EndGroupConference",
			Handler:    _Conference_EndGroupConference_Handler,
		},
		{
			MethodName: "EndPublicConference",
			Handler:    _Conference_EndPublicConference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference/conference.proto",
}
