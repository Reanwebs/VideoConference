// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: conference.proto

package conference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conference_HealthCheck_FullMethodName              = "/conference.Conference/HealthCheck"
	Conference_ScheduleConference_FullMethodName       = "/conference.Conference/ScheduleConference"
	Conference_StartPrivateConference_FullMethodName   = "/conference.Conference/StartPrivateConference"
	Conference_StartGroupConference_FullMethodName     = "/conference.Conference/StartGroupConference"
	Conference_StartPublicConference_FullMethodName    = "/conference.Conference/StartPublicConference"
	Conference_JoinPrivateConference_FullMethodName    = "/conference.Conference/JoinPrivateConference"
	Conference_JoinGroupConfernce_FullMethodName       = "/conference.Conference/JoinGroupConfernce"
	Conference_JoinPublicConference_FullMethodName     = "/conference.Conference/JoinPublicConference"
	Conference_AcceptJoining_FullMethodName            = "/conference.Conference/AcceptJoining"
	Conference_DeclineJoining_FullMethodName           = "/conference.Conference/DeclineJoining"
	Conference_LeavePrivateConference_FullMethodName   = "/conference.Conference/LeavePrivateConference"
	Conference_LeaveGroupConference_FullMethodName     = "/conference.Conference/LeaveGroupConference"
	Conference_LeavePublicConference_FullMethodName    = "/conference.Conference/LeavePublicConference"
	Conference_RemovePrivateParticipant_FullMethodName = "/conference.Conference/RemovePrivateParticipant"
	Conference_RemoveGroupParticipant_FullMethodName   = "/conference.Conference/RemoveGroupParticipant"
	Conference_RemovePublicParticipant_FullMethodName  = "/conference.Conference/RemovePublicParticipant"
	Conference_EndPrivateConference_FullMethodName     = "/conference.Conference/EndPrivateConference"
	Conference_EndGroupConference_FullMethodName       = "/conference.Conference/EndGroupConference"
	Conference_EndPublicConference_FullMethodName      = "/conference.Conference/EndPublicConference"
	Conference_ToggleCamera_FullMethodName             = "/conference.Conference/ToggleCamera"
	Conference_ToggleMic_FullMethodName                = "/conference.Conference/ToggleMic"
	Conference_ToggleParticipantCamera_FullMethodName  = "/conference.Conference/ToggleParticipantCamera"
	Conference_ToggleParticipantMic_FullMethodName     = "/conference.Conference/ToggleParticipantMic"
)

// ConferenceClient is the client API for Conference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceClient interface {
	HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ScheduleConference(ctx context.Context, in *ScheduleConferenceRequest, opts ...grpc.CallOption) (*ScheduleConferenceResponse, error)
	StartPrivateConference(ctx context.Context, in *StartPrivateConferenceRequest, opts ...grpc.CallOption) (*StartPrivateConferenceResponse, error)
	StartGroupConference(ctx context.Context, in *StartGroupConferenceRequest, opts ...grpc.CallOption) (*StartGroupConferenceResponse, error)
	StartPublicConference(ctx context.Context, in *StartPublicConferenceRequest, opts ...grpc.CallOption) (*StartPublicConferenceResponse, error)
	JoinPrivateConference(ctx context.Context, in *JoinPrivateConferenceRequest, opts ...grpc.CallOption) (*JoinPrivateConferenceResponse, error)
	JoinGroupConfernce(ctx context.Context, in *JoinGroupConferenceRequest, opts ...grpc.CallOption) (*JoinGroupConferenceResponse, error)
	JoinPublicConference(ctx context.Context, in *JoinPublicConferenceRequest, opts ...grpc.CallOption) (*JoinPublicConferenceResponse, error)
	AcceptJoining(ctx context.Context, in *AcceptJoiningRequest, opts ...grpc.CallOption) (*AcceptJoiningResponse, error)
	DeclineJoining(ctx context.Context, in *DeclineJoiningRequest, opts ...grpc.CallOption) (*DeclineJoiningResponse, error)
	LeavePrivateConference(ctx context.Context, in *LeavePrivateConferenceRequest, opts ...grpc.CallOption) (*LeavePrivateConferenceResponse, error)
	LeaveGroupConference(ctx context.Context, in *LeaveGroupConferenceRequest, opts ...grpc.CallOption) (*LeaveGroupConferenceResponse, error)
	LeavePublicConference(ctx context.Context, in *LeavePublicConferenceRequest, opts ...grpc.CallOption) (*LeavePublicConferenceResponse, error)
	RemovePrivateParticipant(ctx context.Context, in *RemovePrivateParticipantRequest, opts ...grpc.CallOption) (*RemovePrivateParticipantResponse, error)
	RemoveGroupParticipant(ctx context.Context, in *RemoveGroupParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupParticipantResponse, error)
	RemovePublicParticipant(ctx context.Context, in *RemovePublicParticipantRequest, opts ...grpc.CallOption) (*RemovePublicParticipantResponse, error)
	EndPrivateConference(ctx context.Context, in *EndPrivateConferenceRequest, opts ...grpc.CallOption) (*EndPrivateConferenceResponse, error)
	EndGroupConference(ctx context.Context, in *EndGroupConferenceRequest, opts ...grpc.CallOption) (*EndGroupConferenceResponse, error)
	EndPublicConference(ctx context.Context, in *EndPublicConferenceRequest, opts ...grpc.CallOption) (*EndPublicConferenceResponse, error)
	ToggleCamera(ctx context.Context, in *ToggleCameraRequest, opts ...grpc.CallOption) (*ToggleCameraResponse, error)
	ToggleMic(ctx context.Context, in *ToggleMicRequest, opts ...grpc.CallOption) (*ToggleMicResponse, error)
	ToggleParticipantCamera(ctx context.Context, in *ToggleParticipantCameraRequest, opts ...grpc.CallOption) (*ToggleParticipantCameraResponse, error)
	ToggleParticipantMic(ctx context.Context, in *ToggleParticipantMicRequest, opts ...grpc.CallOption) (*ToggleParticipantMicResponse, error)
}

type conferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceClient(cc grpc.ClientConnInterface) ConferenceClient {
	return &conferenceClient{cc}
}

func (c *conferenceClient) HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Conference_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ScheduleConference(ctx context.Context, in *ScheduleConferenceRequest, opts ...grpc.CallOption) (*ScheduleConferenceResponse, error) {
	out := new(ScheduleConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_ScheduleConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartPrivateConference(ctx context.Context, in *StartPrivateConferenceRequest, opts ...grpc.CallOption) (*StartPrivateConferenceResponse, error) {
	out := new(StartPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartGroupConference(ctx context.Context, in *StartGroupConferenceRequest, opts ...grpc.CallOption) (*StartGroupConferenceResponse, error) {
	out := new(StartGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartPublicConference(ctx context.Context, in *StartPublicConferenceRequest, opts ...grpc.CallOption) (*StartPublicConferenceResponse, error) {
	out := new(StartPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinPrivateConference(ctx context.Context, in *JoinPrivateConferenceRequest, opts ...grpc.CallOption) (*JoinPrivateConferenceResponse, error) {
	out := new(JoinPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinGroupConfernce(ctx context.Context, in *JoinGroupConferenceRequest, opts ...grpc.CallOption) (*JoinGroupConferenceResponse, error) {
	out := new(JoinGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinGroupConfernce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) JoinPublicConference(ctx context.Context, in *JoinPublicConferenceRequest, opts ...grpc.CallOption) (*JoinPublicConferenceResponse, error) {
	out := new(JoinPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_JoinPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) AcceptJoining(ctx context.Context, in *AcceptJoiningRequest, opts ...grpc.CallOption) (*AcceptJoiningResponse, error) {
	out := new(AcceptJoiningResponse)
	err := c.cc.Invoke(ctx, Conference_AcceptJoining_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) DeclineJoining(ctx context.Context, in *DeclineJoiningRequest, opts ...grpc.CallOption) (*DeclineJoiningResponse, error) {
	out := new(DeclineJoiningResponse)
	err := c.cc.Invoke(ctx, Conference_DeclineJoining_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeavePrivateConference(ctx context.Context, in *LeavePrivateConferenceRequest, opts ...grpc.CallOption) (*LeavePrivateConferenceResponse, error) {
	out := new(LeavePrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeavePrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeaveGroupConference(ctx context.Context, in *LeaveGroupConferenceRequest, opts ...grpc.CallOption) (*LeaveGroupConferenceResponse, error) {
	out := new(LeaveGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeaveGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) LeavePublicConference(ctx context.Context, in *LeavePublicConferenceRequest, opts ...grpc.CallOption) (*LeavePublicConferenceResponse, error) {
	out := new(LeavePublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_LeavePublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemovePrivateParticipant(ctx context.Context, in *RemovePrivateParticipantRequest, opts ...grpc.CallOption) (*RemovePrivateParticipantResponse, error) {
	out := new(RemovePrivateParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemovePrivateParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemoveGroupParticipant(ctx context.Context, in *RemoveGroupParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupParticipantResponse, error) {
	out := new(RemoveGroupParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemoveGroupParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) RemovePublicParticipant(ctx context.Context, in *RemovePublicParticipantRequest, opts ...grpc.CallOption) (*RemovePublicParticipantResponse, error) {
	out := new(RemovePublicParticipantResponse)
	err := c.cc.Invoke(ctx, Conference_RemovePublicParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndPrivateConference(ctx context.Context, in *EndPrivateConferenceRequest, opts ...grpc.CallOption) (*EndPrivateConferenceResponse, error) {
	out := new(EndPrivateConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndPrivateConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndGroupConference(ctx context.Context, in *EndGroupConferenceRequest, opts ...grpc.CallOption) (*EndGroupConferenceResponse, error) {
	out := new(EndGroupConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndGroupConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) EndPublicConference(ctx context.Context, in *EndPublicConferenceRequest, opts ...grpc.CallOption) (*EndPublicConferenceResponse, error) {
	out := new(EndPublicConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_EndPublicConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ToggleCamera(ctx context.Context, in *ToggleCameraRequest, opts ...grpc.CallOption) (*ToggleCameraResponse, error) {
	out := new(ToggleCameraResponse)
	err := c.cc.Invoke(ctx, Conference_ToggleCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ToggleMic(ctx context.Context, in *ToggleMicRequest, opts ...grpc.CallOption) (*ToggleMicResponse, error) {
	out := new(ToggleMicResponse)
	err := c.cc.Invoke(ctx, Conference_ToggleMic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ToggleParticipantCamera(ctx context.Context, in *ToggleParticipantCameraRequest, opts ...grpc.CallOption) (*ToggleParticipantCameraResponse, error) {
	out := new(ToggleParticipantCameraResponse)
	err := c.cc.Invoke(ctx, Conference_ToggleParticipantCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) ToggleParticipantMic(ctx context.Context, in *ToggleParticipantMicRequest, opts ...grpc.CallOption) (*ToggleParticipantMicResponse, error) {
	out := new(ToggleParticipantMicResponse)
	err := c.cc.Invoke(ctx, Conference_ToggleParticipantMic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServer is the server API for Conference service.
// All implementations must embed UnimplementedConferenceServer
// for forward compatibility
type ConferenceServer interface {
	HealthCheck(context.Context, *Request) (*Response, error)
	ScheduleConference(context.Context, *ScheduleConferenceRequest) (*ScheduleConferenceResponse, error)
	StartPrivateConference(context.Context, *StartPrivateConferenceRequest) (*StartPrivateConferenceResponse, error)
	StartGroupConference(context.Context, *StartGroupConferenceRequest) (*StartGroupConferenceResponse, error)
	StartPublicConference(context.Context, *StartPublicConferenceRequest) (*StartPublicConferenceResponse, error)
	JoinPrivateConference(context.Context, *JoinPrivateConferenceRequest) (*JoinPrivateConferenceResponse, error)
	JoinGroupConfernce(context.Context, *JoinGroupConferenceRequest) (*JoinGroupConferenceResponse, error)
	JoinPublicConference(context.Context, *JoinPublicConferenceRequest) (*JoinPublicConferenceResponse, error)
	AcceptJoining(context.Context, *AcceptJoiningRequest) (*AcceptJoiningResponse, error)
	DeclineJoining(context.Context, *DeclineJoiningRequest) (*DeclineJoiningResponse, error)
	LeavePrivateConference(context.Context, *LeavePrivateConferenceRequest) (*LeavePrivateConferenceResponse, error)
	LeaveGroupConference(context.Context, *LeaveGroupConferenceRequest) (*LeaveGroupConferenceResponse, error)
	LeavePublicConference(context.Context, *LeavePublicConferenceRequest) (*LeavePublicConferenceResponse, error)
	RemovePrivateParticipant(context.Context, *RemovePrivateParticipantRequest) (*RemovePrivateParticipantResponse, error)
	RemoveGroupParticipant(context.Context, *RemoveGroupParticipantRequest) (*RemoveGroupParticipantResponse, error)
	RemovePublicParticipant(context.Context, *RemovePublicParticipantRequest) (*RemovePublicParticipantResponse, error)
	EndPrivateConference(context.Context, *EndPrivateConferenceRequest) (*EndPrivateConferenceResponse, error)
	EndGroupConference(context.Context, *EndGroupConferenceRequest) (*EndGroupConferenceResponse, error)
	EndPublicConference(context.Context, *EndPublicConferenceRequest) (*EndPublicConferenceResponse, error)
	ToggleCamera(context.Context, *ToggleCameraRequest) (*ToggleCameraResponse, error)
	ToggleMic(context.Context, *ToggleMicRequest) (*ToggleMicResponse, error)
	ToggleParticipantCamera(context.Context, *ToggleParticipantCameraRequest) (*ToggleParticipantCameraResponse, error)
	ToggleParticipantMic(context.Context, *ToggleParticipantMicRequest) (*ToggleParticipantMicResponse, error)
	mustEmbedUnimplementedConferenceServer()
}

// UnimplementedConferenceServer must be embedded to have forward compatible implementations.
type UnimplementedConferenceServer struct {
}

func (UnimplementedConferenceServer) HealthCheck(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedConferenceServer) ScheduleConference(context.Context, *ScheduleConferenceRequest) (*ScheduleConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleConference not implemented")
}
func (UnimplementedConferenceServer) StartPrivateConference(context.Context, *StartPrivateConferenceRequest) (*StartPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPrivateConference not implemented")
}
func (UnimplementedConferenceServer) StartGroupConference(context.Context, *StartGroupConferenceRequest) (*StartGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGroupConference not implemented")
}
func (UnimplementedConferenceServer) StartPublicConference(context.Context, *StartPublicConferenceRequest) (*StartPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPublicConference not implemented")
}
func (UnimplementedConferenceServer) JoinPrivateConference(context.Context, *JoinPrivateConferenceRequest) (*JoinPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPrivateConference not implemented")
}
func (UnimplementedConferenceServer) JoinGroupConfernce(context.Context, *JoinGroupConferenceRequest) (*JoinGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupConfernce not implemented")
}
func (UnimplementedConferenceServer) JoinPublicConference(context.Context, *JoinPublicConferenceRequest) (*JoinPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublicConference not implemented")
}
func (UnimplementedConferenceServer) AcceptJoining(context.Context, *AcceptJoiningRequest) (*AcceptJoiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJoining not implemented")
}
func (UnimplementedConferenceServer) DeclineJoining(context.Context, *DeclineJoiningRequest) (*DeclineJoiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineJoining not implemented")
}
func (UnimplementedConferenceServer) LeavePrivateConference(context.Context, *LeavePrivateConferenceRequest) (*LeavePrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePrivateConference not implemented")
}
func (UnimplementedConferenceServer) LeaveGroupConference(context.Context, *LeaveGroupConferenceRequest) (*LeaveGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroupConference not implemented")
}
func (UnimplementedConferenceServer) LeavePublicConference(context.Context, *LeavePublicConferenceRequest) (*LeavePublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePublicConference not implemented")
}
func (UnimplementedConferenceServer) RemovePrivateParticipant(context.Context, *RemovePrivateParticipantRequest) (*RemovePrivateParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrivateParticipant not implemented")
}
func (UnimplementedConferenceServer) RemoveGroupParticipant(context.Context, *RemoveGroupParticipantRequest) (*RemoveGroupParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupParticipant not implemented")
}
func (UnimplementedConferenceServer) RemovePublicParticipant(context.Context, *RemovePublicParticipantRequest) (*RemovePublicParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicParticipant not implemented")
}
func (UnimplementedConferenceServer) EndPrivateConference(context.Context, *EndPrivateConferenceRequest) (*EndPrivateConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPrivateConference not implemented")
}
func (UnimplementedConferenceServer) EndGroupConference(context.Context, *EndGroupConferenceRequest) (*EndGroupConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGroupConference not implemented")
}
func (UnimplementedConferenceServer) EndPublicConference(context.Context, *EndPublicConferenceRequest) (*EndPublicConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPublicConference not implemented")
}
func (UnimplementedConferenceServer) ToggleCamera(context.Context, *ToggleCameraRequest) (*ToggleCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleCamera not implemented")
}
func (UnimplementedConferenceServer) ToggleMic(context.Context, *ToggleMicRequest) (*ToggleMicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleMic not implemented")
}
func (UnimplementedConferenceServer) ToggleParticipantCamera(context.Context, *ToggleParticipantCameraRequest) (*ToggleParticipantCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleParticipantCamera not implemented")
}
func (UnimplementedConferenceServer) ToggleParticipantMic(context.Context, *ToggleParticipantMicRequest) (*ToggleParticipantMicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleParticipantMic not implemented")
}
func (UnimplementedConferenceServer) mustEmbedUnimplementedConferenceServer() {}

// UnsafeConferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceServer will
// result in compilation errors.
type UnsafeConferenceServer interface {
	mustEmbedUnimplementedConferenceServer()
}

func RegisterConferenceServer(s grpc.ServiceRegistrar, srv ConferenceServer) {
	s.RegisterService(&Conference_ServiceDesc, srv)
}

func _Conference_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).HealthCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ScheduleConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ScheduleConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ScheduleConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ScheduleConference(ctx, req.(*ScheduleConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartPrivateConference(ctx, req.(*StartPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartGroupConference(ctx, req.(*StartGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartPublicConference(ctx, req.(*StartPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinPrivateConference(ctx, req.(*JoinPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinGroupConfernce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinGroupConfernce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinGroupConfernce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinGroupConfernce(ctx, req.(*JoinGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_JoinPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).JoinPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_JoinPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).JoinPublicConference(ctx, req.(*JoinPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_AcceptJoining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptJoiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).AcceptJoining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_AcceptJoining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).AcceptJoining(ctx, req.(*AcceptJoiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_DeclineJoining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineJoiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).DeclineJoining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_DeclineJoining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).DeclineJoining(ctx, req.(*DeclineJoiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeavePrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeavePrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeavePrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeavePrivateConference(ctx, req.(*LeavePrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeaveGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeaveGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeaveGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeaveGroupConference(ctx, req.(*LeaveGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_LeavePublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).LeavePublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_LeavePublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).LeavePublicConference(ctx, req.(*LeavePublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemovePrivateParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePrivateParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemovePrivateParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemovePrivateParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemovePrivateParticipant(ctx, req.(*RemovePrivateParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemoveGroupParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemoveGroupParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemoveGroupParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemoveGroupParticipant(ctx, req.(*RemoveGroupParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_RemovePublicParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePublicParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).RemovePublicParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_RemovePublicParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).RemovePublicParticipant(ctx, req.(*RemovePublicParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndPrivateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPrivateConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndPrivateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndPrivateConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndPrivateConference(ctx, req.(*EndPrivateConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndGroupConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGroupConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndGroupConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndGroupConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndGroupConference(ctx, req.(*EndGroupConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_EndPublicConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPublicConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).EndPublicConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_EndPublicConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).EndPublicConference(ctx, req.(*EndPublicConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ToggleCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ToggleCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ToggleCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ToggleCamera(ctx, req.(*ToggleCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ToggleMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleMicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ToggleMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ToggleMic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ToggleMic(ctx, req.(*ToggleMicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ToggleParticipantCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleParticipantCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ToggleParticipantCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ToggleParticipantCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ToggleParticipantCamera(ctx, req.(*ToggleParticipantCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_ToggleParticipantMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleParticipantMicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).ToggleParticipantMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_ToggleParticipantMic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).ToggleParticipantMic(ctx, req.(*ToggleParticipantMicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Conference_ServiceDesc is the grpc.ServiceDesc for Conference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conference.Conference",
	HandlerType: (*ConferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Conference_HealthCheck_Handler,
		},
		{
			MethodName: "ScheduleConference",
			Handler:    _Conference_ScheduleConference_Handler,
		},
		{
			MethodName: "StartPrivateConference",
			Handler:    _Conference_StartPrivateConference_Handler,
		},
		{
			MethodName: "StartGroupConference",
			Handler:    _Conference_StartGroupConference_Handler,
		},
		{
			MethodName: "StartPublicConference",
			Handler:    _Conference_StartPublicConference_Handler,
		},
		{
			MethodName: "JoinPrivateConference",
			Handler:    _Conference_JoinPrivateConference_Handler,
		},
		{
			MethodName: "JoinGroupConfernce",
			Handler:    _Conference_JoinGroupConfernce_Handler,
		},
		{
			MethodName: "JoinPublicConference",
			Handler:    _Conference_JoinPublicConference_Handler,
		},
		{
			MethodName: "AcceptJoining",
			Handler:    _Conference_AcceptJoining_Handler,
		},
		{
			MethodName: "DeclineJoining",
			Handler:    _Conference_DeclineJoining_Handler,
		},
		{
			MethodName: "LeavePrivateConference",
			Handler:    _Conference_LeavePrivateConference_Handler,
		},
		{
			MethodName: "LeaveGroupConference",
			Handler:    _Conference_LeaveGroupConference_Handler,
		},
		{
			MethodName: "LeavePublicConference",
			Handler:    _Conference_LeavePublicConference_Handler,
		},
		{
			MethodName: "RemovePrivateParticipant",
			Handler:    _Conference_RemovePrivateParticipant_Handler,
		},
		{
			MethodName: "RemoveGroupParticipant",
			Handler:    _Conference_RemoveGroupParticipant_Handler,
		},
		{
			MethodName: "RemovePublicParticipant",
			Handler:    _Conference_RemovePublicParticipant_Handler,
		},
		{
			MethodName: "EndPrivateConference",
			Handler:    _Conference_EndPrivateConference_Handler,
		},
		{
			MethodName: "EndGroupConference",
			Handler:    _Conference_EndGroupConference_Handler,
		},
		{
			MethodName: "EndPublicConference",
			Handler:    _Conference_EndPublicConference_Handler,
		},
		{
			MethodName: "ToggleCamera",
			Handler:    _Conference_ToggleCamera_Handler,
		},
		{
			MethodName: "ToggleMic",
			Handler:    _Conference_ToggleMic_Handler,
		},
		{
			MethodName: "ToggleParticipantCamera",
			Handler:    _Conference_ToggleParticipantCamera_Handler,
		},
		{
			MethodName: "ToggleParticipantMic",
			Handler:    _Conference_ToggleParticipantMic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference.proto",
}
