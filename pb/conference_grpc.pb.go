// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: conference.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conference_HealthCheck_FullMethodName     = "/pb.Conference/HealthCheck"
	Conference_StartConference_FullMethodName = "/pb.Conference/StartConference"
)

// ConferenceClient is the client API for Conference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceClient interface {
	HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	StartConference(ctx context.Context, in *StartConferenceRequest, opts ...grpc.CallOption) (*StartConferenceResponse, error)
}

type conferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceClient(cc grpc.ClientConnInterface) ConferenceClient {
	return &conferenceClient{cc}
}

func (c *conferenceClient) HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Conference_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceClient) StartConference(ctx context.Context, in *StartConferenceRequest, opts ...grpc.CallOption) (*StartConferenceResponse, error) {
	out := new(StartConferenceResponse)
	err := c.cc.Invoke(ctx, Conference_StartConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServer is the server API for Conference service.
// All implementations must embed UnimplementedConferenceServer
// for forward compatibility
type ConferenceServer interface {
	HealthCheck(context.Context, *Request) (*Response, error)
	StartConference(context.Context, *StartConferenceRequest) (*StartConferenceResponse, error)
	mustEmbedUnimplementedConferenceServer()
}

// UnimplementedConferenceServer must be embedded to have forward compatible implementations.
type UnimplementedConferenceServer struct {
}

func (UnimplementedConferenceServer) HealthCheck(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedConferenceServer) StartConference(context.Context, *StartConferenceRequest) (*StartConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConference not implemented")
}
func (UnimplementedConferenceServer) mustEmbedUnimplementedConferenceServer() {}

// UnsafeConferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceServer will
// result in compilation errors.
type UnsafeConferenceServer interface {
	mustEmbedUnimplementedConferenceServer()
}

func RegisterConferenceServer(s grpc.ServiceRegistrar, srv ConferenceServer) {
	s.RegisterService(&Conference_ServiceDesc, srv)
}

func _Conference_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).HealthCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conference_StartConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServer).StartConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conference_StartConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServer).StartConference(ctx, req.(*StartConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Conference_ServiceDesc is the grpc.ServiceDesc for Conference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Conference",
	HandlerType: (*ConferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Conference_HealthCheck_Handler,
		},
		{
			MethodName: "StartConference",
			Handler:    _Conference_StartConference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference.proto",
}
